"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
"""
import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
from analytics import TelegramAnalytics
import config

class AIExporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ò–ò
    """
    
    def __init__(self, db_path: str):
        self.analytics = TelegramAnalytics(db_path)
        self.db_path = db_path
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è AI —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
        self.ai_export_dir = os.path.join(config.OUTPUT_DIR, 'ai_ready')
        if not os.path.exists(self.ai_export_dir):
            os.makedirs(self.ai_export_dir)
    
    def create_chat_analysis_file(self, chat_id: int, filename: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"chat_{chat_id}_analysis_{timestamp}.json"
        
        filepath = os.path.join(self.ai_export_dir, filename)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_data = self.analytics.generate_ai_friendly_summary(chat_id, max_messages=200)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        analysis_data['instructions_for_ai'] = {
            'purpose': '–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–º –≤ Telegram —á–∞—Ç–µ',
            'data_structure': {
                'messages_for_analysis': '–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                'context': '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞',
                'analysis_prompts': '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            },
            'recommended_analysis': [
                '–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤',
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è',
                '–ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                '–û—Ü–µ–Ω–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π',
                '–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã'
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2)
        
        print(f"ü§ñ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_data['messages_for_analysis'])}")
        
        return filepath
    
    def create_overview_file(self, filename: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_overview_{timestamp}.json"
        
        filepath = os.path.join(self.ai_export_dir, filename)
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        overview_data = {
            'overview_type': 'telegram_full_analysis',
            'created_at': datetime.now().isoformat(),
            'most_active_chats': self.analytics.get_most_active_chats(limit=10),
            'recent_activity': self.analytics.get_activity_by_time(),
            'global_topics': self.analytics.analyze_conversation_topics(),
            'changes_summary': self.analytics.get_message_changes_analytics(),
            'sample_messages': self.analytics.generate_ai_friendly_summary(max_messages=50),
            
            'ai_analysis_suggestions': [
                '–ö–∞–∫–∏–µ —á–∞—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
                '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω?',
                '–ö–∞–∫–∏–µ —Ç–µ–º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è?',
                '–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º?',
                '–ï—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–±—â–µ–Ω–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–∞—Ö?'
            ],
            
            'insights_to_look_for': [
                '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
                '–†–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–∞—Ö',
                '–≠–≤–æ–ª—é—Ü–∏—è —Ç–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤',
                '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(overview_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω –æ–±–∑–æ—Ä–Ω—ã–π —Ñ–∞–π–ª: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        
        return filepath
    
    def create_conversation_snippet(self, chat_id: int, days: int = 7, filename: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"conversation_snippet_{chat_id}_{days}days_{timestamp}.txt"
        
        filepath = os.path.join(self.ai_export_dir, filename)
        
        import sqlite3
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            messages = conn.execute('''
                SELECT 
                    m.text,
                    m.date,
                    COALESCE(u.first_name, u.username, 'User_' || u.id) as author_name,
                    c.name as chat_name
                FROM messages m
                LEFT JOIN users u ON m.sender_id = u.id
                LEFT JOIN chats c ON m.chat_id = c.id
                WHERE m.chat_id = ? 
                AND m.is_deleted = FALSE 
                AND m.text IS NOT NULL 
                AND LENGTH(m.text) > 3
                AND m.date > datetime('now', '-{} days')
                ORDER BY m.date ASC
            '''.format(days), (chat_id,)).fetchall()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ª–æ–≥
        conversation_text = f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ —á–∞—Ç–∞: {messages[0]['chat_name'] if messages else 'Unknown'}\n"
        conversation_text += f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n"
        conversation_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
        conversation_text += "=" * 50 + "\n\n"
        
        current_date = None
        for msg in messages:
            msg_date = msg['date'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ –¥–Ω—è–º
            if current_date != msg_date:
                conversation_text += f"\n--- {msg_date} ---\n"
                current_date = msg_date
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            time = msg['date'][11:16]  # –í—Ä–µ–º—è HH:MM
            author = msg['author_name']
            text = msg['text'].replace('\n', ' ')  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            
            conversation_text += f"[{time}] {author}: {text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò
        conversation_text += "\n" + "=" * 50 + "\n"
        conversation_text += "–ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n"
        conversation_text += "1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        conversation_text += "2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        conversation_text += "3. –ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n"
        conversation_text += "4. –û—Ü–µ–Ω–∏ —Ç–æ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        conversation_text += "5. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–∞\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(conversation_text)
        
        print(f"üí¨ –°–æ–∑–¥–∞–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        return filepath
    
    def create_topic_analysis_file(self, filename: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–º –¥–ª—è –ò–ò
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"topics_analysis_{timestamp}.json"
        
        filepath = os.path.join(self.ai_export_dir, filename)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã
        topics_data = self.analytics.analyze_conversation_topics()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        ai_topics_data = {
            'analysis_type': 'topic_analysis',
            'created_at': datetime.now().isoformat(),
            'word_frequency_data': topics_data,
            'top_topics_context': {
                'most_frequent_words': topics_data['top_words'][:30],
                'total_unique_words': topics_data['unique_words'],
                'messages_analyzed': topics_data['total_messages_analyzed']
            },
            'ai_analysis_tasks': [
                '–°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã',
                '–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤',
                '–ù–∞–π–¥–∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã',
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –æ —á–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç —á–∞—â–µ –≤—Å–µ–≥–æ',
                '–í—ã–¥–µ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏'
            ],
            'interpretation_hints': [
                '–í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã',
                '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Ä–∞–∂–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è',
                '–¢–æ–ø–æ–Ω–∏–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏'
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(ai_topics_data, f, ensure_ascii=False, indent=2)
        
        print(f"üè∑Ô∏è –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º: {filename}")
        print(f"üìÅ –ü—É—Ç—å: {filepath}")
        
        return filepath
    
    def create_complete_ai_package(self, chat_id: int = None) -> Dict[str, str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
        """
        print("üéØ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞...")
        
        package_files = {}
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        try:
            # 1. –û–±—â–∏–π –æ–±–∑–æ—Ä
            package_files['overview'] = self.create_overview_file(
                f"overview_{timestamp}.json"
            )
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
            package_files['topics'] = self.create_topic_analysis_file(
                f"topics_{timestamp}.json"
            )
            
            # 3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
            if chat_id:
                package_files['chat_analysis'] = self.create_chat_analysis_file(
                    chat_id, f"chat_{chat_id}_{timestamp}.json"
                )
                package_files['conversation'] = self.create_conversation_snippet(
                    chat_id, days=14, filename=f"conversation_{chat_id}_{timestamp}.txt"
                )
            
            # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            instruction_file = os.path.join(self.ai_export_dir, f"AI_ANALYSIS_GUIDE_{timestamp}.md")
            self._create_analysis_guide(instruction_file, package_files)
            package_files['guide'] = instruction_file
            
            print("\nüéâ –ü–∞–∫–µ—Ç AI –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤!")
            print("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:", self.ai_export_dir)
            
            return package_files
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            return package_files
    
    def _create_analysis_guide(self, filepath: str, package_files: Dict[str, str]):
        """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–Ω–∞–ª–∏–∑—É"""
        guide_content = f"""# ü§ñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ AI –∞–Ω–∞–ª–∏–∑—É Telegram –¥–∞–Ω–Ω—ã—Ö

## üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:

"""
        
        for file_type, file_path in package_files.items():
            filename = os.path.basename(file_path)
            guide_content += f"- **{file_type}**: `{filename}`\n"
        
        guide_content += """
## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É:

### 1. –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ (`overview_*.json`)
- –ó–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–µ—Ä–≤—ã–º –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
- –°–ø—Ä–æ—Å–∏ –ò–ò: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Telegram"
- –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

### 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º (`topics_*.json`)
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
- –°–ø—Ä–æ—Å–∏: "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —è –æ–±—Å—É–∂–¥–∞—é?"
- –ü–æ–ø—Ä–æ—Å–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º

### 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (`chat_*.json`)
- –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
- –°–ø—Ä–æ—Å–∏: "–ö–∞–∫ —è –æ–±—â–∞—é—Å—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ?"
- –ü–æ–ø—Ä–æ—Å–∏ –Ω–∞–π—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

### 4. –§—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (`conversation_*.txt`)
- –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
- –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –ò–ò –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
- –•–æ—Ä–æ—à–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –∏ —Ç–æ–Ω–∞

## üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò:

### –û–±—â–∏–µ:
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Telegram –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥"
- "–ö–∞–∫–∏–µ –≤—ã–≤–æ–¥—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ –º–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö?"
- "–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –º–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º?"

### –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- "–ö–∞–∫ —è –æ–±—â–∞—é—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–∞—Ö?"
- "–ö–∞–∫–æ–π —É –º–µ–Ω—è —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞?"
- "–ò—Å–ø–æ–ª—å–∑—É—é –ª–∏ —è –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏/—Å–ª–µ–Ω–≥–∞?"

### –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
- "–í –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö —è –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω?"
- "–° –∫–µ–º —è –æ–±—â–∞—é—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ?"
- "–ï—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–±—â–µ–Ω–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏?"

### –¢–µ–º—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:
- "–û —á–µ–º —è —á–∞—â–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä—é?"
- "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã?"
- "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –≤ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?"

## üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
- –í—Å–µ JSON —Ñ–∞–π–ª—ã –≤ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–µ
- –î–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –ò–ò
- –£–¥–∞–ª–µ–Ω—ã –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ID –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∏–º–µ–Ω–∞)

## ‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ –ò–ò
- –£–±–µ—Ä–∏ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
- –ù–µ –∑–∞–≥—Ä—É–∂–∞–π –¥–∞–Ω–Ω—ã–µ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –ò–ò –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {os.path.basename(filepath)}")