"""
Telegram Parser - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤
"""
import asyncio
import json
import os
from datetime import datetime
from typing import List, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import Message, User, Chat, Channel
from database import TelegramDatabase
import config

class TelegramParser:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ Telegram
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.client = None
        self.session_name = 'telegram_parser_session'
        self.db = None
        if config.ENABLE_HISTORY_TRACKING:
            db_path = os.path.join(config.OUTPUT_DIR, config.DB_FILENAME)
            self.db = TelegramDatabase(db_path)
        
    async def initialize(self):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        """
        print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        self.client = TelegramClient(
            self.session_name, 
            config.API_ID, 
            config.API_HASH
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await self.client.start(phone=config.PHONE_NUMBER)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Telegram!")
        
    async def get_chats_list(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
        """
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        chats = []
        
        async for dialog in self.client.iter_dialogs():
            chat_info = {
                'id': dialog.id,
                'name': dialog.name,
                'type': type(dialog.entity).__name__,
                'unread_count': dialog.unread_count
            }
            chats.append(chat_info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –ë–î
            if self.db:
                self.db.save_chat(chat_info)
            
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
        return chats
    
    async def parse_chat_messages(self, chat_id: int, limit: int = None, session_id: str = None) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
            session_id: ID —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        if limit is None:
            limit = config.MAX_MESSAGES
            
        print(f"üí¨ –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id} (–ª–∏–º–∏—Ç: {limit})...")
        
        messages = []
        current_message_ids = []
        
        async for message in self.client.iter_messages(chat_id, limit=limit):
            if isinstance(message, Message):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                if message.sender and self.db:
                    await self._save_user_info(message.sender)
                
                message_data = {
                    'id': message.id,
                    'date': message.date.isoformat() if message.date else None,
                    'text': message.text or '',
                    'sender_id': message.sender_id,
                    'chat_id': chat_id,
                    'reply_to': message.reply_to_msg_id if message.reply_to else None,
                    'media_type': type(message.media).__name__ if message.media else None,
                    'views': getattr(message, 'views', 0),
                    'forwards': getattr(message, 'forwards', 0)
                }
                
                messages.append(message_data)
                current_message_ids.append(message.id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if self.db and session_id:
                    self.db.save_message_with_history(message_data, session_id)
        
        # –ü–æ–º–µ—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.db and session_id:
            deleted_count = self.db.mark_deleted_messages(chat_id, current_message_ids, session_id)
            if deleted_count > 0:
                print(f"üóëÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {deleted_count} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        print(f"‚úÖ –°–ø–∞—Ä—Å–∏–ª–∏ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return messages
    
    async def parse_all_chats(self) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        session_id = None
        if self.db:
            session_id = self.db.create_scan_session()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats = await self.get_chats_list()
        
        all_data = {
            'timestamp': datetime.now().isoformat(),
            'total_chats': len(chats),
            'chats': {},
            'session_id': session_id
        }
        
        changes_detected = 0
        total_messages = 0
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —á–∞—Ç
        for i, chat in enumerate(chats, 1):
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(chats)} - –ü–∞—Ä—Å–∏–º '{chat['name']}'")
            
            try:
                messages = await self.parse_chat_messages(chat['id'], session_id=session_id)
                all_data['chats'][str(chat['id'])] = {
                    'info': chat,
                    'messages': messages,
                    'total_messages': len(messages)
                }
                total_messages += len(messages)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∞—Ç–∞ '{chat['name']}': {e}")
                all_data['chats'][str(chat['id'])] = {
                    'info': chat,
                    'error': str(e),
                    'messages': [],
                    'total_messages': 0
                }
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        if self.db and session_id:
            stats = {
                'total_chats': len(chats),
                'total_messages': total_messages,
                'changes_detected': changes_detected
            }
            self.db.close_scan_session(session_id, stats)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_summary = self.db.get_changes_summary()
            all_data['changes_summary'] = changes_summary
        
        return all_data
    
    async def _save_user_info(self, user):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not isinstance(user, User) or not self.db:
            return
            
        import sqlite3
        with sqlite3.connect(self.db.db_path) as conn:
            conn.execute('''
                INSERT OR IGNORE INTO users (id, username, first_name, last_name, phone)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user.id,
                getattr(user, 'username', None),
                getattr(user, 'first_name', None),
                getattr(user, 'last_name', None),
                getattr(user, 'phone', None)
            ))
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.client:
            await self.client.disconnect()
            print("üëã –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç Telegram")